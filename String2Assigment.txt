String Assignment2


1.WAP(Write a program) to remove Duplicates from a string.(Take any String example with duplicates character)


Ans :-Here is a Java program to remove duplicate characters from a string:
Program:
import java.util.HashSet;


public class RemoveDuplicates {
    public static String removeDuplicates(String input) {
        // Initialize a StringBuilder to store the result
        StringBuilder result = new StringBuilder();
        // Create a HashSet to track characters that have already been seen
        HashSet<Character> seen = new HashSet<>();


        // Iterate through each character in the input string
        for (char c : input.toCharArray()) {
            // If the character has not been seen yet, add it to the result
            if (!seen.contains(c)) {
                result.append(c);
                // Mark the character as seen
                seen.add(c);
            }
        }


        return result.toString();
    }


    public static void main(String[] args) {
        String input = "programming";
        String result = removeDuplicates(input);
        System.out.println("Original string: " + input);
        System.out.println("String after removing duplicates: " + result);
    }
}


OUTPUT: 
Original string: programming
String after removing duplicates: progamin


Explanation:
The program converts the input string into a character array and iterates over it.
A HashSet is used to keep track of characters that have already been added to the result string.
If a character is not in the HashSet, it gets appended to the StringBuilder and added to the HashSet.
Finally, the StringBuilder is converted to a string and returned, which contains only unique characters.


2.WAP to print Duplicates characters from the String
Ans :-Here is a Java program to print the duplicate characters from a string:
Program:
import java.util.HashMap;
import java.util.Map;


public class PrintDuplicateCharacters {
    public static void printDuplicates(String input) {
        // Create a HashMap to count occurrences of each character
        HashMap<Character, Integer> charCountMap = new HashMap<>();


        // Convert input string to a character array and iterate through it
        for (char c : input.toCharArray()) {
            // If the character is already in the map, increment its count
            if (charCountMap.containsKey(c)) {
                charCountMap.put(c, charCountMap.get(c) + 1);
            } else {
                // Otherwise, add the character to the map with a count of 1
                charCountMap.put(c, 1);
            }
        }


        System.out.println("Duplicate characters in the string \"" + input + "\" are:");


        // Iterate through the map to find and print duplicate characters
        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
            if (entry.getValue() > 1) {
                System.out.println(entry.getKey() + " : " + entry.getValue() + " times");
            }
        }
    }


    public static void main(String[] args) {
        String input = "programming";
        printDuplicates(input);
    }
}
Example Output:
Duplicate characters in the string "programming" are:
r : 2 times
g : 2 times
m : 2 times


Explanation:The program uses a HashMap to store each character from the string as a key and its occurrence count as the value.
As it iterates through the string, it increments the count for each character if it has been encountered before.
After building the map, it checks for characters with a count greater than 1 and prints them as duplicates along with their frequency.






3.WAP to check if "2552" is palindrome or not.
Ans :-Here's a Java program to check if the string "2552" is a palindrome:
public class PalindromeCheck {
    public static boolean isPalindrome(String input) {
        // Initialize two pointers, one at the beginning and one at the end of the string
        int left = 0;
        int right = input.length() - 1;


        // Iterate while the left pointer is less than the right pointer
        while (left < right) {
            // Compare characters at both pointers
            if (input.charAt(left) != input.charAt(right)) {
                return false; // If characters don't match, it's not a palindrome
            }
            left++;  // Move left pointer to the right
            right--; // Move right pointer to the left
        }
        return true; // If all characters match, it's a palindrome
    }


    public static void main(String[] args) {
        String input = "2552";
        if (isPalindrome(input)) {
            System.out.println(input + " is a palindrome.");
        } else {
            System.out.println(input + " is not a palindrome.");
        }
    }
}
Example Output:
2552 is a palindrome.


Explanation:
* The program checks if the input string reads the same forwards and backwards.
* Two pointers are used to compare characters from the start and end of the string moving towards the center.
* If all corresponding characters match, the string is a palindrome; otherwise, it is not.










4.WAP to count the number of consonants, vowels, special characters in a String.
Ans :-Here's a Java program to count the number of consonants, vowels, and special characters in a given string:
Program:
public class CharacterCounter {
    public static void countCharacters(String input) {
        // Initialize counters for vowels, consonants, and special characters
        int vowelCount = 0;
        int consonantCount = 0;
        int specialCharacterCount = 0;


        // Convert the string to lowercase to make the comparison case-insensitive
        input = input.toLowerCase();


        // Iterate through each character in the string
        for (int i = 0; i < input.length(); i++) {
            char ch = input.charAt(i);


            // Check if the character is a vowel
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                vowelCount++;
            } 
            // Check if the character is a consonant
            else if (ch >= 'a' && ch <= 'z') {
                consonantCount++;
            } 
            // If it's neither a vowel nor a consonant, it is a special character
            else {
                specialCharacterCount++;
            }
        }


        // Print the counts
        System.out.println("Vowels: " + vowelCount);
        System.out.println("Consonants: " + consonantCount);
        System.out.println("Special characters: " + specialCharacterCount);
    }


    public static void main(String[] args) {
        String input = "Hello, World! 123";
        countCharacters(input);
    }
}
Example Output:
Vowels: 3
Consonants: 7
Special characters: 8


Explanation:
The program iterates through each character in the string.
It checks if each character is a vowel (a, e, i, o, u), a consonant (any letter that is not a vowel), or a special character (any character that is not a letter).
The counts for vowels, consonants, and special characters are updated accordingly and printed at the end.










5.WAP to implement Anagram Checking least inbuilt methods being used.
Ans :-Here's a Java program to check if two strings are anagrams with minimal use of inbuilt methods:
Program:-
import java.util.Scanner;


public class AnagramCheck {
    public static boolean areAnagrams(String str1, String str2) {
        // Remove spaces and convert strings to lowercase
        str1 = str1.replaceAll("\\s", "").toLowerCase();
        str2 = str2.replaceAll("\\s", "").toLowerCase();


        // If the lengths of the two strings are not the same, they cannot be anagrams
        if (str1.length() != str2.length()) {
            return false;
        }


        // Create an array to count the frequency of each character
        int[] charCount = new int[26];


        // Increment the count for each character in str1
        for (int i = 0; i < str1.length(); i++) {
            charCount[str1.charAt(i) - 'a']++;
        }


        // Decrement the count for each character in str2
        for (int i = 0; i < str2.length(); i++) {
            charCount[str2.charAt(i) - 'a']--;
        }


        // If all counts are zero, the strings are anagrams
        for (int count : charCount) {
            if (count != 0) {
                return false;
            }
        }


        return true;
    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        System.out.println("Enter the first string:");
        String str1 = scanner.nextLine();


        System.out.println("Enter the second string:");
        String str2 = scanner.nextLine();


        if (areAnagrams(str1, str2)) {
            System.out.println("The strings are anagrams.");
        } else {
            System.out.println("The strings are not anagrams.");
        }


        scanner.close();
    }
}
Example Output:
Enter the first string:
Listen
Enter the second string:
Silent
The strings are anagrams.


Explanation:
Preprocessing:


The program removes spaces and converts both strings to lowercase to ensure that the comparison is case-insensitive and not affected by spaces.
Character Counting:


The program uses an integer array charCount of size 26 (corresponding to the 26 letters in the alphabet) to keep track of the frequency of each character in the two strings.
It increments the count for each character in the first string and decrements the count for each character in the second string.
Anagram Check:


After processing both strings, if all values in charCount are zero, the strings are anagrams. If any value is non-zero, they are not anagrams.
This method avoids the use of inbuilt sorting or other complex methods, ensuring the solution is straightforward and efficient.










6.WAP to implement Pangram Checking with least inbuilt methods being used.
Ans :-Here’s a Java program to check if a string is a pangram with minimal use of inbuilt methods:
Program:
import java.util.Scanner;


public class PangramCheck {
    public static boolean isPangram(String str) {
        // Convert the string to lowercase to handle case insensitivity
        str = str.toLowerCase();


        // Create an array to track the occurrence of each letter
        boolean[] alphabetArray = new boolean[26];
        int index = 0;


        // Iterate through each character in the string
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);


            // Check if the character is a letter
            if (ch >= 'a' && ch <= 'z') {
                index = ch - 'a';
                alphabetArray[index] = true;
            }
        }


        // Check if all letters were found
        for (boolean found : alphabetArray) {
            if (!found) {
                return false; // If any letter is missing, it's not a pangram
            }
        }


        return true; // If all letters are present, it's a pangram
    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        System.out.println("Enter a string:");
        String input = scanner.nextLine();


        if (isPangram(input)) {
            System.out.println("The string is a pangram.");
        } else {
            System.out.println("The string is not a pangram.");
        }


        scanner.close();
    }
}
Example Output:
Enter a string:
The quick brown fox jumps over the lazy dog
The string is a pangram.


Explanation:
Preprocessing:


The program converts the input string to lowercase to handle case insensitivity.
Tracking Letters:


The program uses a boolean array alphabetArray of size 26, where each index represents a letter of the alphabet (a to z).
As it iterates through the string, it marks the corresponding index as true for each letter found.
Pangram Check:


After processing the string, the program checks if all values in alphabetArray are true. If any value is false, the string is not a pangram.
This method avoids using inbuilt functions like set or complex string methods, focusing on fundamental array and loop operations.








7.WAP to find if String contains all unique characters.
Ans :-Here's a Java program to check if a string contains all unique characters:
Program:
import java.util.Scanner;


public class UniqueCharactersCheck {
    public static boolean hasAllUniqueCharacters(String str) {
        // Assume the string contains only ASCII characters (128 unique characters)
        if (str.length() > 128) {
            return false; // More characters than possible unique characters in ASCII
        }


        // Create a boolean array to track characters
        boolean[] charSet = new boolean[128];


        // Iterate through the string
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (charSet[ch]) {
                return false; // If character is already found, string doesn't have all unique characters
            }
            charSet[ch] = true; // Mark character as found
        }


        return true; // If no duplicates were found, all characters are unique
    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        System.out.println("Enter a string:");
        String input = scanner.nextLine();


        if (hasAllUniqueCharacters(input)) {
            System.out.println("The string has all unique characters.");
        } else {
            System.out.println("The string does not have all unique characters.");
        }


        scanner.close();
    }
}
Example Output:
Enter a string:
abcdefg
The string has all unique characters.


Enter a string:
hello
The string does not have all unique characters.


Explanation:
Assumption:


The program assumes the string contains only ASCII characters, which limits the possible unique characters to 128.
Character Tracking:


A boolean array charSet of size 128 is used to keep track of whether each character has been encountered in the string.
If a character is found that has already been seen (i.e., its corresponding index in charSet is true), the function returns false.
Unique Check:


If the function iterates through the entire string without finding a duplicate, it returns true, indicating that the string has all unique characters.
This approach uses minimal inbuilt methods and is efficient for checking uniqueness, especially for strings with a limited character set like ASCII.
















8.WAP to find the maximum occurring character in a String
Ans :- Here's a Java program to find the maximum occurring character in a string:


import java.util.Scanner;


public class MaxOccurringCharacter {
    public static char getMaxOccurringChar(String str) {
        // Create an array to count the occurrences of each character
        int[] charCount = new int[256]; // Assuming extended ASCII set


        // Iterate through the string and count the occurrences of each character
        for (int i = 0; i < str.length(); i++) {
            charCount[str.charAt(i)]++;
        }


        // Find the character with the maximum occurrences
        int maxCount = -1;
        char maxChar = ' ';


        for (int i = 0; i < str.length(); i++) {
            if (charCount[str.charAt(i)] > maxCount) {
                maxCount = charCount[str.charAt(i)];
                maxChar = str.charAt(i);
            }
        }


        return maxChar;
    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        System.out.println("Enter a string:");
        String input = scanner.nextLine();


        char result = getMaxOccurringChar(input);
        System.out.println("The maximum occurring character is: " + result);


        scanner.close();
    }
}


Example Output:
Enter a string:
sample string
The maximum occurring character is: s
Explanation:
Character Counting:


The program uses an integer array charCount of size 256 to count the occurrences of each character (assuming the extended ASCII character set).
Tracking Maximum Occurrence:


As the program iterates through the string, it increments the count for each character in the charCount array.
It then iterates through the string again to find the character with the highest occurrence by comparing the counts stored in the charCount array.
Output:


The character with the maximum occurrence is stored in maxChar, which is then printed as the result.
This approach efficiently finds the maximum occurring character with minimal use of inbuilt methods, and it handles both lowercase and uppercase characters as well as special characters.